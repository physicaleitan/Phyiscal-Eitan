const express = require("express");
const router = express.Router();
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
const { verifyToken, verifyAdmin, verifyAdminOrTeacher } = require("../middleware/authMiddleware");
const myCache = require("../utils/cache"); // ◊ô◊ô◊ë◊ï◊ê ◊î◊ß◊ê◊©
const Question = require("../models/Question"); // ◊†◊ì◊®◊© ◊¢◊ë◊ï◊® ◊î◊§◊ï◊†◊ß◊¶◊ô◊î ◊î◊§◊†◊ô◊û◊ô◊™ ◊ë◊§◊†◊ì◊ô◊†◊í
const {
  uploadQuestion,
  deleteQuestion,
  editQuestion,
  getQuestion,
  giveHint,
  testSolution,
  approveQuestion,
  addSolutionSteps,
  getQuestionsByTag,
  showSolution,
  nextQuestion,
  getAllUnapprovedQuestions,
  getAllApprovedQuestions,
  getQuestionsBySubject
} = require("../controllers/questionController");
const { uploadQuestionImage } = require("../controllers/questionController");

console.log("‚úÖ Routes loaded!"); // ◊ú◊ï◊ï◊ì◊ê ◊©◊î◊†◊™◊ô◊ë ◊†◊ò◊¢◊ü
router.post("/upload-image", verifyToken, upload.single("image"), uploadQuestionImage);

// üìå ◊ê◊ô◊©◊ï◊® ◊©◊ê◊ú◊î
router.put("/approve", (req, res, next) => {
  console.log("‚úÖ Request received at /approve");
  next();
}, verifyToken, verifyAdminOrTeacher, approveQuestion);

// üìå ◊î◊ï◊°◊§◊™ ◊©◊ê◊ú◊î
router.post("/", verifyToken, uploadQuestion);

// üìå ◊û◊ó◊ô◊ß◊™ ◊©◊ê◊ú◊î
router.delete("/:id", verifyToken,deleteQuestion);

// üìå ◊¢◊®◊ô◊õ◊™ ◊©◊ê◊ú◊î
router.put("/:id", editQuestion);

// üìå ◊©◊ú◊ô◊§◊™ ◊õ◊ú ◊î◊©◊ê◊ú◊ï◊™ ◊©◊ú◊ê ◊ê◊ï◊©◊®◊ï
router.get("/unapproved", getAllUnapprovedQuestions);

// üìå ◊©◊ú◊ô◊§◊™ ◊õ◊ú ◊î◊©◊ê◊ú◊ï◊™ ◊î◊û◊ê◊ï◊©◊®◊ï◊™ (◊ú◊§◊ô ◊¶◊ï◊®◊ö)
router.get("/approved", getAllApprovedQuestions);

// üìå ◊©◊ú◊ô◊§◊™ ◊©◊ê◊ú◊ï◊™ ◊ú◊§◊ô ◊†◊ï◊©◊ê
router.get("/by-subject/:subjectId", getQuestionsBySubject);

// üìå ◊©◊ú◊ô◊§◊™ ◊®◊û◊ñ
router.get("/:id/hint/:hintIndex", giveHint);

// üìå ◊ë◊ì◊ô◊ß◊™ ◊™◊©◊ï◊ë◊î
router.post("/:id/test", testSolution);

// üìå ◊î◊¶◊í◊™ ◊§◊™◊®◊ï◊ü
router.get("/:id/solution", showSolution);

// üìå ◊î◊ï◊°◊§◊™ ◊ì◊®◊õ◊ô ◊§◊™◊®◊ï◊ü
router.put("/:id/solution-steps", addSolutionSteps);

// üìå ◊©◊ê◊ú◊î ◊î◊ë◊ê◊î
router.get("/:id/next", async (req, res, next) => {
  try {
    const { id } = req.params;
    let cachedNextQuestion = myCache.get(`${id}-next`);
    if (cachedNextQuestion) {
      console.log("Returning next question from cache...");
      return res.status(200).json(cachedNextQuestion);
    }
    await nextQuestion(req, res);
  } catch (error) {
    next(error);
  }
});

// üìå ◊©◊ú◊ô◊§◊™ ◊©◊ê◊ú◊î ◊ë◊ï◊ì◊ì◊™ ◊ú◊§◊ô ID
router.get("/:id", async (req, res, next) => {
  try {
    const { id } = req.params;
    let cachedQuestion = myCache.get(id);
    if (cachedQuestion) {
      console.log("Returning question from cache...");
      return res.status(200).json(cachedQuestion);
    }
    await getQuestion(req, res); // ◊†◊ì◊®◊© ◊ú◊ï◊ï◊ì◊ê ◊©◊î◊§◊ï◊†◊ß◊¶◊ô◊î ◊ß◊ô◊ô◊û◊™ ◊ë◊ß◊ï◊†◊ò◊®◊ï◊ú◊®
  } catch (error) {
    next(error);
  }
});
router.get("/by-tag/:tag", verifyToken ,getQuestionsByTag);
// üìå (◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô) ◊©◊ú◊ô◊§◊™ ◊©◊ê◊ú◊ï◊™ ◊ë◊§◊ï◊®◊û◊ò 'pending'
router.get("/pending", verifyToken, verifyAdmin, async (req, res) => {
  try {
    const pendingQuestions = await Question.find({ status: "pending" });
    res.status(200).json(pendingQuestions);
  } catch (error) {
    console.error("‚ùå Error fetching pending questions:", error.message);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
// router.get("/by-tag/:tag", verifyToken ,getQuestionsByTag);
// getQuestionsByTag